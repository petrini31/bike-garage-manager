
import { useState } from "react"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useCreateCliente, useUpdateCliente } from "@/hooks/useClientes"
import { Cliente } from "@/types/database"

interface ClienteDialogProps {
  cliente?: Cliente
  trigger: React.ReactNode
  open?: boolean
  onOpenChange?: (open: boolean) => void
  mode?: "create" | "edit" | "view"
}

export function ClienteDialog({ cliente, trigger, open, onOpenChange, mode = "create" }: ClienteDialogProps) {
  const [internalOpen, setInternalOpen] = useState(false)
  const [formData, setFormData] = useState({
    nome: cliente?.nome || "",
    telefone: cliente?.telefone || "",
    email: cliente?.email || "",
    endereco: cliente?.endereco || "",
    cpf_cnpj: cliente?.cpf_cnpj || ""
  })

  const createCliente = useCreateCliente()
  const updateCliente = useUpdateCliente()

  const isOpen = open !== undefined ? open : internalOpen
  const setOpen = onOpenChange || setInternalOpen

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    if (mode === "view") return
    
    if (cliente && mode === "edit") {
      updateCliente.mutate(
        { id: cliente.id, ...formData },
        {
          onSuccess: () => {
            setOpen(false)
            setFormData({ nome: "", telefone: "", email: "", endereco: "", cpf_cnpj: "" })
          }
        }
      )
    } else {
      // For new clients, numero_cliente is auto-generated by the database
      createCliente.mutate(
        formData,
        {
          onSuccess: () => {
            setOpen(false)
            setFormData({ nome: "", telefone: "", email: "", endereco: "", cpf_cnpj: "" })
          }
        }
      )
    }
  }

  const isReadOnly = mode === "view"

  return (
    <Dialog open={isOpen} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {trigger}
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>
            {mode === "view" ? "Visualizar Cliente" : cliente ? "Editar Cliente" : "Novo Cliente"}
          </DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="nome">Nome *</Label>
            <Input
              id="nome"
              value={formData.nome}
              onChange={(e) => setFormData(prev => ({ ...prev, nome: e.target.value }))}
              required
              readOnly={isReadOnly}
            />
          </div>
          <div>
            <Label htmlFor="telefone">Telefone</Label>
            <Input
              id="telefone"
              value={formData.telefone}
              onChange={(e) => setFormData(prev => ({ ...prev, telefone: e.target.value }))}
              placeholder="(xx) xxxxx-xxxx"
              readOnly={isReadOnly}
            />
          </div>
          <div>
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              value={formData.email}
              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
              readOnly={isReadOnly}
            />
          </div>
          <div>
            <Label htmlFor="endereco">Endere√ßo</Label>
            <Input
              id="endereco"
              value={formData.endereco}
              onChange={(e) => setFormData(prev => ({ ...prev, endereco: e.target.value }))}
              readOnly={isReadOnly}
            />
          </div>
          <div>
            <Label htmlFor="cpf_cnpj">CPF/CNPJ</Label>
            <Input
              id="cpf_cnpj"
              value={formData.cpf_cnpj}
              onChange={(e) => setFormData(prev => ({ ...prev, cpf_cnpj: e.target.value }))}
              readOnly={isReadOnly}
            />
          </div>
          <div className="flex gap-2 justify-end">
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              {isReadOnly ? "Fechar" : "Cancelar"}
            </Button>
            {!isReadOnly && (
              <Button 
                type="submit" 
                disabled={createCliente.isPending || updateCliente.isPending}
                className="bg-brilliant-blue-600 hover:bg-brilliant-blue-700"
              >
                {cliente ? "Atualizar" : "Criar"}
              </Button>
            )}
          </div>
        </form>
      </DialogContent>
    </Dialog>
  )
}
